
    def ENVIRONMENTS = [
    DEV: [env: 'cm-dev'],
    QA: [env: 'cm-qa'],
    PRODUCTION: [env: 'cm-prod']
    ]

    def VF_REGIONS = [
        'nora',
        'emea'
    ]

    def allowed_environments = get_allowed_values(ENVIRONMENTS,env.JOB_NAME)
    def allowed_regions = get_allowed_values(VF_REGIONS,env.JOB_NAME)

pipeline { 
     parameters {
        choice(name: 'ENVIRONMENT', choices: allowed_environments, description: 'The environment.')
        choice(name: 'VF_REGION', choices: allowed_regions, description: 'VF region eg: nora= North America Resources| emea= Europe Resources')
        password(name: 'AWS_CREDENTIALS', defaultValue: '', description: 'Enter AWS credentials. e.g. export AWS_ACCESS_KEY_ID=[...] export AWS_SECRET_ACCESS_KEY=[...] export AWS_SESSION_TOKEN=[...]')
    }

    agent { label 'master' }
    environment{
        AWS_ACCESS_KEY_ID	= "${params.AWS_ACCESS_KEY_ID}"
     AWS_SECRET_ACCESS_KEY  = "${params.AWS_SECRET_ACCESS_KEY}" 
    }
    tools { 
        maven "Default"
        jdk "Default"
    }
    options{
        timestamps()
    }
    stages {
         stage('Validate inputs and user') {
            agent { label 'master' }
            steps{
                script{
                    if (params.AWS_CREDENTIALS == null || params.AWS_CREDENTIALS.toString().trim() == ""){
                        error("AWS credentials not present. Pls insert the values in this way: export AWS_ACCESS_KEY_ID=[...] export AWS_SECRET_ACCESS_KEY=[...] export AWS_SESSION_TOKEN=[...]")
                    }
                    def user_id = ""
                    AWS_ENVIRONMENT=ENVIRONMENTS[env.ENVIRONMENT]['env']
                    env.AWS_ACCESS_KEY_ID=get_aws_credentials_from_input.getCredential("AWS_ACCESS_KEY_ID")
                    env.AWS_SECRET_ACCESS_KEY=get_aws_credentials_from_input.getCredential("AWS_SECRET_ACCESS_KEY")
                    env.AWS_SESSION_TOKEN=get_aws_credentials_from_input.getCredential("AWS_SESSION_TOKEN")
                    wrap([$class: 'BuildUser']) {
                        currentBuild.displayName = "${BUILD_NUMBER} - ${BUILD_USER}, environment: ${ENVIRONMENT} "
                    }
                }
            }
        }
            //Cleaning the workspace
        stage('Clean Workspace'){
                steps {
                    deleteDir()
                }
        }   
            //Checking out Source Code
            stage('Checkout SCM'){
                steps {
//                checkout([$class: 'GitSCM', branches: [[name: '$BranchName']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'Github_cred', url: 'git@github.com:Royal-Enfield/re-platform-online-bike-booking-batch-service']]])
                sh "cp -r /home/anant/oms-notification/* $WORKSPACE"
                        }    
        }    
            //Building the Source Code and Testing        
             stage('Building Code'){
                steps {
                    sh "echo $WORKSPACE"
                    sh "mvn -B -f $WORKSPACE/pom.xml clean package"
                } 
           }
           /*stage('Building and Pushing Docker Image'){
               steps{
                   sh "docker build -t ${Registry}/${ImageName}-${AWS_ENVIRONMENT}-${VF_REGION}:${BUILD_NUMBER} ${WORKSPACE}"
                   withCredentials([usernamePassword(credentialsId: 'EcrRegistry', passwordVariable: 'password', usernameVariable: 'username')]) {
                    sh "docker login $Registry -u $username -p $password"
                    sh "docker push ${Registry}/${ImageName}-${AWS_ENVIRONMENT}-${VF_REGION}:${BUILD_NUMBER}"
                    }
               }
           }*/
           stage('Deploying Applcation(using Terraform)'){
               when{
                   environment name: 'Deployment', value: 'Yes'
               }         
            steps {
              script {
                   dir('deploy/terraform'){
                       sh label: 'configure_terraform', script: "/home/anant/bin/terraform init -backend-config=\"../config/${env.VF_REGION}/${env.AWS_ENVIRONMENT}.tfvars\" --reconfigure"
                       sh label: 'run_terraform', script: "cp \"../config/${env.VF_REGION}/${env.AWS_ENVIRONMENT}.tfvars\" config.auto.tfvars; /home/anant/bin/terraform apply -var=\"account_environment=${env.AWS_ENVIRONMENT}\" -var=\"vf_region=${env.VF_REGION}\" -var=\"image_name=${Registry}/${ImageName}-${AWS_ENVIRONMENT}-${VF_REGION}:${BUILD_NUMBER}\" -auto-approve"
                    }
                }
            }
        } 
    }    
}

def get_allowed_values(input, job_name) {
    if (input instanceof Map) {
        allowed_value = input.keySet().findAll{label -> job_name.contains(label.toLowerCase())}.join('\n')
    } else if (input instanceof List) {
        allowed_value = input.findAll{label -> job_name.contains(label.toLowerCase())}.join('\n')
    }
     
    if (allowed_value == null) {
        return ""
    } else {
        return allowed_value
    }
}
